@import './ecmarkup.css';

:root {
  --sans: Futura, Trebuchet MS, Arial, sans-serif;
  --serif: Merriweather, georgia, serif;
  --mono: Fira Code, SFMono-Regular, Consolas, Roboto Mono, Droid Sans Mono,
    Liberation Mono, Menlo, Courier, monospace;
  /* source: https://github.com/voodootikigod/logo.js/blob/1544bdee/js.html#L21 */

  --link: #0000aa;
  --xref-link: #206ca7;
  --black: #323330;
  --yellow: #f0db4f;
  --background: #fff;
  --text: #000;

  background: var(--background);
  color: var(--text);

  supported-color-schemes: light dark;
  color-scheme: light dark;

  font: 112.5%/1.45em;
  font-weight: light;
  font-family: var(--serif);
  box-sizing: border-box;
  overflow-y: scroll;
}

@media (prefers-color-scheme: dark) {
  :root {
    --link: #9393ff;
    --xref-link: #4894ce;
    --black: #e3e3e5;
    --yellow: #907f0c;
    --background: #1e1e1e;
    --text: #d6d6d6;
  }
  /* white becomes #1e1e1e */
  object,
  img {
    filter: brightness(88.3%) invert() hue-rotate(0.5turn);
  }
}

body {
  margin: 0;
}
a {
  color: var(--link);
}
abbr[title] {
  border-bottom: none;
  text-decoration: underline;
  text-decoration: underline dotted;
}
article h1 {
  margin: 0.67em 0 !important;
}

main,
.container {
  margin: 0 auto;
  max-width: 1000px;
  padding: 1.45rem 1.0875rem;
}

[type='search']::-webkit-search-cancel-button,
[type='search']::-webkit-search-decoration {
  -webkit-appearance: none;
}
* {
  box-sizing: inherit;
}
*:before {
  box-sizing: inherit;
}
*:after {
  box-sizing: inherit;
}
body {
  word-wrap: break-word;
  -moz-font-feature-settings: 'kern', 'liga', 'clig', 'calt';
  -ms-font-feature-settings: 'kern', 'liga', 'clig', 'calt';
  -webkit-font-feature-settings: 'kern', 'liga', 'clig', 'calt';
  font-feature-settings: 'kern', 'liga', 'clig', 'calt';
}
h1,
h2,
h3,
h4,
h5,
h6 {
  color: var(--black);
  font-family: var(--sans);
  text-rendering: optimizeLegibility;
}
tt,
code {
  background-color: hsla(0, 0%, 0%, 0.04);
  border-radius: 3px;
  font-family: var(--mono);
  font-feature-settings: 'ss03', 'onum';
  padding-left: 0.1em;
  padding-right: 0.1em;
}
pre code {
  background: none;
  line-height: 1.42;
}

h1 .secnum {
  opacity: 0.5;
  font-weight: 300;
}
.secnum:empty {
  display: none;
}
.secnum::after {
  content: ' ';
}
h1 .secnum::after {
  content: ' •';
}
emu-clause h1 .secnum::after {
  content: ' • ';
}

emu-xref[aoid] a,
emu-alg emu-xref[href$='#assert'] a {
  color: var(--xref-link);
  text-decoration: none;
}

emu-nt a:not(:hover) {
  text-decoration: none;
}
emu-nt a:hover {
  color: var(--link) !important;
}

/* square : characters */
emu-geq {
  font-family: Cambria, Palatino Linotype, Palatino, Liberation Serif, serif;
}

article emu-note > span.note {
  font-family: var(--sans);
  min-width: 70px;
  padding-left: 0.5em;
}

footer {
  font-family: var(--sans);
  font-size: 0.75em;
  color: #666;
  line-height: 1.25;

  border-top: 1px solid #aaa;
  padding: 1em 2em 0;
  margin: 0 -2em;
}

header {
  color: var(--black);
  background: var(--yellow);
  margin-bottom: 1.45rem;
}
header h1,
header h2 {
  margin-bottom: 0;
  font-family: var(--sans);
}
header h1 {
  font-size: 2.1em;
  margin-top: 0;
}
header a {
  color: inherit;
  text-decoration: none;
}
header h2 {
  font-size: 1.5em;
}

.nav-arrow {
  font-family: var(--mono);
  display: inline-block;
  white-space: nowrap;
  padding: 0 0.5em;
}

.search-hit {
  font-family: var(--sans);
  color: var(--black);
  text-decoration: none;
}
.hit-title {
  text-decoration: underline;
}
.hit-content {
  margin-top: 0;
  opacity: 0.5;
}

.toc-list,
.toc-list ol {
  counter-reset: idx;
  list-style-type: none;
}
.toc-list {
  padding-left: 1ex;
}
.toc-list ol {
  padding-left: 50px;
}
.toc-list li {
  counter-increment: idx;
}
.toc-list li::before {
  font-family: var(--mono);
  content: counters(idx, '.', decimal) '.';
  margin-left: calc(6px - 40px);
  text-align: right;
  position: relative;
  display: inline-block;
  right: 6px;
  width: 60px;
}
.toc-list.is-appendix {
  counter-reset: appendix;
}
.toc-list.is-appendix > li {
  counter-reset: appendix-idx;
  counter-increment: appendix;
}
.toc-list.is-appendix ol li {
  counter-increment: appendix-idx;
}
.toc-list.is-appendix li::before {
  content: counter(appendix, upper-alpha) '.' counter(appendix-idx, decimal) '.';
}
.toc-list.is-appendix > li::before {
  content: counter(appendix, upper-alpha) '.';
}
